" probably fix for Vundle problems
set shell=/bin/bash

" this is for VIM, so let's enable all features
set nocompatible

" turn off filetype detection (required by Vundle)
filetype off

" activate Vundle
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

" ===== Vundle Plugins ========================================================

" Manage Vundle with Vundle
Plugin 'gmarik/Vundle.vim'

" Auto balance brackets, quotes, ...
Plugin 'vim-scripts/delimitMate.vim'

" File explorer
Plugin 'scrooloose/nerdtree'

" General integration of Git
Plugin 'tpope/vim-fugitive'

" Indicate changes in the file (only supporting Git)
Plugin 'airblade/vim-gitgutter'

" Show indentation guides
Plugin 'nathanaelkane/vim-indent-guides'

" Enhances status line
" Plugin 'vim-airline/vim-airline'

" Read and apply .editorconfig
Plugin 'editorconfig/editorconfig-vim'

Plugin 'vim-python/python-syntax'

" Colorschemes
" FIXME: These are primarily for reference while developing a custom theme.
Plugin 'pasela/edark.vim'
Plugin 'joshdick/onedark.vim'
Plugin 'NLKNguyen/papercolor-theme'

call vundle#end()


" ===== general configuration =================================================

syntax on           " enable syntax hightlighting
set number          " enable line numbers
set ignorecase      " ignore case while searching
set title           " show title in console title bar
set visualbell      " no bell, just blink the screen
set noautowrite     " thanks, no automatic writing
set noautowriteall
set confirm
set noautoread      " and surely no automatic reading
set nobackup        " deactivate auto-backup
set nowb
set noswapfile      " get rid of this nasty swap files
set hidden          " hide buffers when not displayed
" set cmdheight=0     " do not show the command line (requires vim > 9.0)

set t_Co=256        " set colorspace to 256
set background=dark " manually override the background
colorscheme allnightlong  " actually apply the colorscheme


" ===== editing ===============================================================

set nowrap          " don't wrap lines
set linebreak       " and surely don't wrap text in the middle of a word
set autoindent      " try to be smart about indentation
set smartindent     " I mean, like, really smart
set expandtab       " use spaces instead of tabs
set tabstop=4       " <tab> produces 4 spaces
set shiftwidth=4
set backspace=indent,eol,start " fix backspacing
set scrolloff=3     " let some lines...
set sidescroll=1   " ... and characters be visible while scrolling
set sidescrolloff=7
set cursorline      " highlight the current line
set cursorlineopt=number,screenline
set hlsearch        " highlight search results
set incsearch       " highlight while still typing

" EXPERIMENTAL
set list
" TODO: Set color for SpecialKey (see :h listchars)
set listchars=tab:<->,trail:-

" ``colorcolumn`` let you set visual markers for the line length.
" As this is only relevant while editing, the setting is not applied directly.
" Instead, it is only shown in ``INSERT`` mode.
" Use the ``autocmd`` line including ``InsertEnter`` as usual.
" See https://codeyarns.com/tech/2013-02-07-how-to-show-colorcolumn-only-in-insert-mode-of-vim.html
augroup ColorColumnInsertMode
    autocmd!
    autocmd InsertEnter * setlocal colorcolumn=80
    autocmd InsertLeave * setlocal colorcolumn=0
augroup END


" ===== custom functions ======================================================

" Return the highlight group and its effective link
function! SynStack ()
    if !exists("*synstack")
        return
    endif

    " get the current line and column under cursor
    let l:cur_line = line(".")
    let l:cur_col = col(".")

    " get the current stack of highlight groups
    let l:stack = map(synstack(l:cur_line, l:cur_col), "synIDattr(v:val, 'name')")

    " get the effective highlight group for styling
    let l:eff_grp_id = synIDtrans(synID(l:cur_line, l:cur_col, 1))
    let l:eff_grp_str = synIDattr(l:eff_grp_id, "name")

    " print the results
    echo l:stack
    echon " --> "
    echon l:eff_grp_str
endfunction


" ====== plugin settings ======================================================

" indent-guides
" FIXME: Set the required highlight groups in allnightlong.vim
let g:indent_guides_start_level=2
let g:indent_guides_guide_size=1


" ===== Status Line ===========================================================
" Great example: https://github.com/scrooloose/vimfiles/blob/master/vimrc
" See: https://gist.github.com/meskarune/57b613907ebd1df67eb7bdb83c6e6641

" Map the output of ``mode()`` to actual strings
let g:currentmode={
    \ 'n'  : 'Normal',
    \ 'no' : 'Normal·Operator Pending',
    \ 'v'  : 'Visual',
    \ 'V'  : 'V·Line',
    \ '^V' : 'V·Block',
    \ 's'  : 'Select',
    \ 'S'  : 'S·Line',
    \ '^S' : 'S·Block',
    \ 'i'  : 'Insert',
    \ 'R'  : 'Replace',
    \ 'Rv' : 'V·Replace',
    \ 'c'  : 'Command',
    \ 'cv' : 'Vim Ex',
    \ 'ce' : 'Ex',
    \ 'r'  : 'Prompt',
    \ 'rm' : 'More',
    \ 'r?' : 'Confirm',
    \ '!'  : 'Shell',
    \ 't'  : 'Terminal'
    \}

set laststatus=2    " make the statusline actually visible
set noshowmode      " don't show the mode, as it is included in the statusline

" FIXME: link to actual highlight groups
" TODO: Obviously these may be provided in our custom colorscheme (and this
"       would be the right place *imho*), but other users may use my statusline
"       setup without using the colorscheme. A fallback must be provided here.
au InsertEnter * highlight link customStatusLineMode Statement
au InsertLeave * highlight link customStatusLineMode Function

" Desired Layout
" {VIM MODE}{FILENAME [WARNINGS]}
set statusline=

set statusline+=%#customStatusLineMode#
set statusline+=\ %{toupper(g:currentmode[mode()])}\ " foo
set statusline+=%*

" ===== keys ==================================================================

let mapleader = ","  " use , as the leader key

" Provide mappings for buffer management (only available in NORMAL mode)
nnoremap <Leader>b :buffers<CR>:buffer<Space>
nnoremap <Leader>v :bprev<CR>
nnoremap <Leader>n :bnext<CR>

" Clear search result highlighting
nnoremap <Leader>c :nohls<CR>

" Provide a mapping for the custom SynStack function
nnoremap <Leader>h :call SynStack()<CR>

" Mapping for indent-guides plugin
nnoremap <Leader>g :IndentGuidesToggle<CR>

command! W :w       " let me save with 'W'

map <F2> :NERDTreeToggle<CR>
